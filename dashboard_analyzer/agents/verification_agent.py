from .base_agent import BaseAgent
from typing import Dict, Any
import json
import os
import sys

# Add the parent directory to the path if needed, assuming structure like other agents
# sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class VerificationAgent(BaseAgent):
    """
    Agent specialized in verifying if the output of the SynthesisAgent
    complies with the specified rules, using an LLM for assessment.
    """

    def __init__(self):
        super().__init__()
        # You might use a different model for verification if needed, 
        # but let's use the same one for now.
        # self.verification_model_id = os.getenv('VERIFICATION_MODEL_ARN', self.model_id) 

    def get_system_prompt(self) -> str:
        """Returns a placeholder system prompt (not used for core logic)."""
        # The core verification logic is built within the verify method itself.
        return "Verification Agent System Prompt Placeholder - Logic is in verify method."

    def analyze_image(self, image_path: Any) -> Dict[str, Any]:
        """Placeholder for analyze_image (not applicable for this agent)."""
        # This agent does not analyze images directly.
        print("‚ö†Ô∏è VerificationAgent.analyze_image called, but it does not process images.")
        return {"status": "not_applicable", "message": "VerificationAgent does not analyze images."}

    def verify(self, synthesis_output: Dict) -> Dict:
        """
        Verifica la salida de s√≠ntesis contra las reglas usando un LLM.

        Args:
            synthesis_output: El diccionario JSON generado por SynthesisAgent.

        Returns:
            Diccionario con estado: {"status": "favorable" | "desfavorable", "reason": "..."}
        """
        print("\nüîé Iniciando proceso de verificaci√≥n...")

        # --- REGLAS ACTUALIZADAS Y DETALLADAS PARA EL VERIFICADOR --- 
        synthesis_rules_for_verification = """
        **REGLAS ESTRICTAS A VERIFICAR EN EL JSON PROPORCIONADO:**

        **1. Lenguaje y Terminolog√≠a:**
           - ¬øUsa exclusivamente "target" (no "objetivo")?
           - ¬øUsa exclusivamente "load_factor" (no "factor de carga")?
           - ¬øUsa exclusivamente "inbound" / "outbound" (no "entrada" / "salida")?
           - ¬øUsa exclusivamente "puntualidad en entradas/salidas" (no "puntualidad C15")?
           - ¬øUsa exclusivamente "misshandling" / "missconnections" (sin traducir)?

        **2. Manejo de Datos y Fidelidad:**
           - **Comparaciones (`..._vs_..._prev_week`):** ¬øSolo se mencionan KPIs comparativos si su `is_relevant` era `true` (basado en el texto generado, ya que no ves la entrada)? ¬øSe evita mencionar expl√≠citamente la diferencia porcentual?
           - **Inbound/Outbound en Tendencias/Mapas:** ¬øSe especifica *siempre* "inbound" u "outbound" al describir tendencias o mapas?
           - **Datos Faltantes:** Si el texto menciona datos faltantes, ¬øes breve y relevante al an√°lisis?

        **3. Consideraciones Espec√≠ficas por √Årea (Contenido de los 4 mini-informes):**
           - **Selecci√≥n Inbound/Outbound (Tendencias/Mapas):** Si se describe una tendencia o mapa para un √°rea, ¬øse especifica claramente si se refiere a inbound, outbound o ambos? (La regla subyacente es elegir el segmento con valores m√°s extremos/bajos).
           - **Customer:** (Verificaci√≥n dif√≠cil) ¬øEl texto evita mencionar el decalaje NPS de 4 d√≠as?
           - **Disruptions:** ¬øEl an√°lisis de cancelaciones se centra solo en IB? ¬øSe valora la relevancia de disrupciones en contexto operativo (posible comentario sobre divergencia)?
           - **Commercial:** ¬øSe mencionan intakes recientes (impl√≠cito)? ¬øSe evita detalle exacto en diferencia vs target (redondeo impl√≠cito)? ¬øSe combina vista general y evoluci√≥n? ¬øSe considera estacionalidad/ratio business/leisure si es relevante? ¬øSe menciona crecimiento espectacular (+10M vs target) si ocurri√≥?

        **4. Qu√© Evitar (Ausencia de contenido prohibido):**
           - **Redundancia:** ¬øHay frases o ideas repetidas innecesariamente?
           - **Correlaci√≥n Ops/Disruptions/NPS Obvia:** ¬øEvita mencionar esta correlaci√≥n b√°sica *a menos que* proporcione detalles espec√≠ficos (fechas, valores, etc.) como se indica en el punto 5?
           - **Obviedad General:** ¬øEvita comentarios triviales como "KPIs malos necesitan seguimiento"?
           - **Menci√≥n Expl√≠cita Decalaje NPS:** ¬øContiene la frase "4 d√≠as" o similar al hablar del NPS? (NO DEBE)
           - **Menci√≥n Expl√≠cita Umbrales:** ¬øMenciona valores num√©ricos de umbrales o rangos de referencia? (NO DEBE)

        **5. An√°lisis Cruzado (`overall_interpretation`):**
           - **Conexi√≥n entre √Åreas:** ¬øEl p√°rrafo conecta claramente puntos clave de diferentes √°reas (Commercial, Customer, Ops, Disruptions)?
           - **Verificaci√≥n Decalaje NPS:** ¬øLas conexiones Ops/Disruptions -> NPS parecen temporalmente consistentes (considerando 4 d√≠as impl√≠citamente)? Si se menciona una conexi√≥n espec√≠fica, ¬øincluye detalles (d√≠as, valores, etc.)? ¬øEvita mencionar "4 d√≠as"?
           - **Verificaci√≥n Inbound/Outbound:** Si compara datos entre √°reas (ej. Ops y Customer), ¬ømantiene la perspectiva (inbound con inbound, outbound con outbound)? **¬°VERIFICAR ESTO CUIDADOSAMENTE!**
           - **Comentario Divergencias (Opcional):** Si aplica (ver regla), ¬ødescribe la divergencia Ops/Disruptions/NPS como inesperada?
           - **Evita Obviedades:** ¬øEl an√°lisis cruzado aporta valor m√°s all√° de la correlaci√≥n b√°sica?

        **6. Formato y Estructura:**
           - **JSON V√°lido:** ¬øLa respuesta completa es S√ìLO un objeto JSON v√°lido?
           - **Estructura Exacta:** ¬øLa estructura es estrictamente `{"weekly_report": {"commercial": ..., "customer": ..., "operations": ..., "disruptions": ..., "overall_interpretation": ...}}`?
           - **Longitud:** ¬øCada uno de los 4 informes de √°rea tiene aprox. 2-3 frases? ¬ø`overall_interpretation` tiene aprox. 3-5 frases?
        """
        # -------------------------------------------------------------

        verification_task = (
            "Eres un verificador experto y muy estricto. Tu √∫nica tarea es comprobar si el JSON proporcionado (`synthesis_output`) "
            "cumple ESTRICTAMENTE TODAS las reglas especificadas en `REGLAS A VERIFICAR`. NO intentes corregir el JSON, solo verifica."
            "Tu respuesta DEBE ser OBLIGATORIAMENTE un √∫nico objeto JSON con dos claves:"
            "1. `status`: Debe ser la cadena 'favorable' si CUMPLE TODAS las reglas, o 'desfavorable' si falla en CUALQUIER regla."
            "2. `reason`: Si el status es 'desfavorable', esta clave debe contener una cadena explicando BREVEMENTE cu√°l es la regla M√ÅS IMPORTANTE que se ha incumplido. Si el status es 'favorable', esta clave debe contener una cadena vac√≠a ''."
            "NO incluyas NADA M√ÅS en tu respuesta fuera de este objeto JSON."
        )

        synthesis_output_str = json.dumps(synthesis_output, indent=2, ensure_ascii=False)

        # Prompt para el LLM Verificador (usa reglas actualizadas y copiadas)
        verification_prompt = f"""{verification_task}\n\n{synthesis_rules_for_verification}\n\n**JSON a Verificar (`synthesis_output`):**\n\n```json\n{synthesis_output_str}\n```\n\n**Tu Respuesta (SOLO el JSON de verificaci√≥n):**"""

        # --- DEBUGGING: Print the full prompt sent to the verifier --- 
        print("\n--- DEBUG (Verifier): Prompt Enviado al LLM --- ")
        # Print first N chars for brevity in logs if needed
        # print(verification_prompt[:1500] + ("..." if len(verification_prompt)>1500 else ""))
        print(verification_prompt) # Print full prompt for now
        print("--- FIN DEBUG (Verifier): Prompt Enviado --- \n")
        # --- END DEBUGGING ---

        messages = [{
            "role": "user",
            "content": [{"type": "text", "text": verification_prompt}]
        }]

        try:
            response = self.invoke_model(messages=messages)
            print(f"DEBUG (Verificador): Respuesta LLM cruda: {response}")

            try:
                # Basic cleanup attempt (remove potential markdown)
                cleaned_response = response.strip()
                if cleaned_response.startswith("```json"):
                    cleaned_response = cleaned_response[7:]
                if cleaned_response.endswith("```"):
                    cleaned_response = cleaned_response[:-3]
                cleaned_response = cleaned_response.strip()

                verification_result = json.loads(cleaned_response)
                
                # Validate structure
                if isinstance(verification_result, dict) and \
                   'status' in verification_result and \
                   'reason' in verification_result and \
                   verification_result['status'] in ['favorable', 'desfavorable']:
                    
                    print(f"‚úÖ Resultado Verificaci√≥n: {verification_result}")
                    return verification_result
                else:
                    print("‚ùå Estructura respuesta LLM Verificador inv√°lida.")
                    return {"status": "desfavorable", "reason": "El agente verificador no produjo un JSON de estado v√°lido."}

            except json.JSONDecodeError as e:
                print(f"‚ùå Error decodificando JSON de verificaci√≥n: {e}")
                print(f"Respuesta cruda: {response}")
                return {"status": "desfavorable", "reason": "La respuesta del agente verificador no era JSON v√°lido."}

        except Exception as e:
            print(f"‚ùå Error llamando al modelo de verificaci√≥n: {e}")
            return {"status": "desfavorable", "reason": f"Error durante llamada API de verificaci√≥n: {e}"} 